---

---

<div class="themes">
    <button class="btn light">
        <svg
            width="20px"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
        >
            <path
                class="sun"
                fill-rule="evenodd"
                d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
            ></path>
        </svg>
    </button>
    <button class="btn dark">
        <svg
            width="20px"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
        >
            <path
                class="moon"
                fill-rule="evenodd"
                d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
            ></path>
        </svg>
    </button>
    <button class="btn auto">
        <svg
            width="20px"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
        >
            <path
                class="auto"
                fill-rule="evenodd"
                d="M6 4a2 2 0 00-2 2v8l-1 3h18l-1-3V6a2 2 0 00-2-2H6zm0 1h12a1 1 0 011 1v7H5V6a1 1 0 011-1zm-2.25 9h16.5l.75 2H3l.75-2zm5.25 3h4v1h-4v-1z"
            ></path>
        </svg>
    </button>
</div>

<style>
    .themes {
        display: flex;
        gap: 0.25em;
    }

    .btn {
        width: 30px;
        height: 30px;
        border: solid 1px grey;
        border-radius: 0.5em;
        background: none;
        cursor: pointer;
        opacity: 0.5;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn.active {
        border: solid 1px black;
        opacity: 1;
    }

    .light,
    .dark,
    .auto {
        fill: black;
    }

    :global(.dark) .btn {
        border: solid 1px #e4e4e4;
    }

    :global(.dark) .btn.active svg,
    :global(.dark) .light,
    :global(.dark) .dark,
    :global(.dark) .auto {
        fill: #e4e4e4;
    }
</style>

<script is:inline>
    const theme = (() => {
        const localStorageTheme = localStorage?.getItem("theme") ?? "";
        if (["dark", "light", "auto"].includes(localStorageTheme)) {
            if (localStorageTheme === "auto") {
                return window.matchMedia("(prefers-color-scheme: dark)").matches
                    ? "dark"
                    : "light";
            }
            return localStorageTheme;
        } else {
            localStorage.setItem("theme", "auto");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
        }
        return "light";
    })();

    if (theme === "light") {
        document.documentElement.classList.remove("dark");
    } else {
        document.documentElement.classList.add("dark");
    }

    // Set initial active button based on stored theme setting
    const storedTheme = localStorage.getItem("theme") || "auto";
    document.querySelectorAll(".btn").forEach((btn) => {
        btn.classList.remove("active");
        if (btn.classList.contains(`${storedTheme}`)) {
            btn.classList.add("active");
        }
    });

    const handleThemeChange = (theme) => {
        const element = document.documentElement;
        if (theme === "auto") {
            const isDark = window.matchMedia(
                "(prefers-color-scheme: dark)",
            ).matches;
            element.classList.toggle("dark", isDark);
        } else {
            element.classList.toggle("dark", theme === "dark");
        }
        localStorage.setItem("theme", theme);

        document.querySelectorAll(".btn").forEach((btn) => {
            btn.classList.remove("active");
            if (btn.classList.contains(`${theme}`)) {
                btn.classList.add("active");
            }
        });
    };

    // Add click handlers for theme buttons
    document.querySelectorAll(".btn").forEach((btn) => {
        btn.addEventListener("click", () => {
            const theme = btn.classList.contains("light")
                ? "light"
                : btn.classList.contains("dark")
                  ? "dark"
                  : "auto";
            handleThemeChange(theme);
        });
    });

    if (window.matchMedia) {
        window
            .matchMedia("(prefers-color-scheme: dark)")
            .addEventListener("change", (e) => {
                if (localStorage.getItem("theme") === "auto") {
                    handleThemeChange("auto");
                }
            });
    }
</script>
