---
// CodeBlock.astro
// This component enhances code blocks with language indicator, line numbers, and copy button

const { lang, code } = Astro.props;

// Format the language name for display
const formatLanguage = (lang) => {
  if (!lang) return 'Text';
  
  // Map of language identifiers to display names
  const languageMap = {
    js: 'JavaScript',
    ts: 'TypeScript',
    jsx: 'React JSX',
    tsx: 'React TSX',
    html: 'HTML',
    css: 'CSS',
    java: 'Java',
    python: 'Python',
    ruby: 'Ruby',
    go: 'Go',
    rust: 'Rust',
    c: 'C',
    cpp: 'C++',
    csharp: 'C#',
    php: 'PHP',
    swift: 'Swift',
    kotlin: 'Kotlin',
    // Add more languages as needed
  };
  
  return languageMap[lang] || lang.charAt(0).toUpperCase() + lang.slice(1);
};

// Split code into lines for line numbering
const lines = code.split('\n');
---

<div class="code-block-wrapper">
  <div class="code-header">
    <span class="language-label">{formatLanguage(lang)}</span>
    <button class="copy-button" aria-label="Copy code to clipboard">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
      </svg>
      <span class="copy-text"></span>
    </button>
  </div>
  
  <div class="code-container">
    <div class="line-numbers">
      {lines.map((_, index) => (
        <span class="line-number">{index + 1}</span>
      ))}
    </div>
    
    <pre class={`language-${lang}`}><code class={`language-${lang}`} set:html={code} /></pre>
  </div>
</div>

<style>
  .code-block-wrapper {
    position: relative;
    margin: 1.5em 0;
    border-radius: 6px;
    overflow: hidden;
    background: var(--code-bg, #282c34);
  }
  
  .code-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5em 1em;
    background: var(--code-header-bg, #21252b);
    color: var(--code-header-color, #abb2bf);
    font-family: var(--code-font), monospace;
    font-size: 0.9em;
    border-bottom: 1px solid var(--code-border-color, #181a1f);
  }
  
  .language-label {
    font-weight: bold;
  }
  
  .copy-button {
    display: flex;
    align-items: center;
    gap: 0.5em;
    background: transparent;
    border: none;
    color: var(--code-header-color, #abb2bf);
    cursor: pointer;
    padding: 0.25em 0.5em;
    border-radius: 4px;
    transition: background-color 0.2s;
  }
  
  .copy-button:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
  
  .copy-button svg {
    width: 16px;
    height: 16px;
  }
  
  .code-container {
    display: flex;
    overflow-x: auto;
  }
  
  .line-numbers {
    display: flex;
    flex-direction: column;
    padding: 1em 0.5em;
    text-align: right;
    background: var(--accent-color, rgba(0, 0, 0, 0.2));
    color: var(--accent-color, #636d83);
    user-select: none;
    border-right: 1px solid var(--border-color, #181a1f);
    min-width: 2.5em;
  }
  
  .line-number {
    font-family: var(--code-font), monospace;
    font-size: 0.9em;
    line-height: 1.5;
  }
  
  pre {
    margin: 0;
    padding: 1em;
    overflow-x: auto;
    flex-grow: 1;
  }
  
  code {
    font-family: var(--code-font), monospace;
    font-size: 0.9em;
    line-height: 1.5;
  }
</style>

<script>
  // Client-side script to handle copy functionality
  document.addEventListener('astro:page-load', () => {
    const copyButtons = document.querySelectorAll('.copy-button');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const codeBlock = button.closest('.code-block-wrapper');
        const code = codeBlock.querySelector('code').innerText;
        
        navigator.clipboard.writeText(code).then(() => {
          const copyText = button.querySelector('.copy-text');
          const originalText = copyText.textContent;
          
          copyText.textContent = 'Copied!';
          
          setTimeout(() => {
            copyText.textContent = originalText;
          }, 2000);
        }).catch(err => {
          console.error('Failed to copy code: ', err);
        });
      });
    });
  });
</script>