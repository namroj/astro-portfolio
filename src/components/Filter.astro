---
const { tags } = Astro.props;
---

<div class="filters">
    <form id="searchForm" class="search-form">
        <div class="search-wrapper">
            <input
                type="search"
                id="searchInput"
                placeholder="Find by keyword"
                class="search-input"
            />
            <button
                type="button"
                class="clear-search"
                id="clearSearch"
                style="display: none;"
            >
                ✕
            </button>
        </div>
    </form>

    <div class="tags-filter">
        <button class="tag-btn active" data-tag="all">All</button>
        {
            tags.map((tag: string) => (
                <button class="tag-btn" data-tag={tag}>
                    {tag}
                </button>
            ))
        }
    </div>
</div>

<div class="no-results" style="display: none;">
    <p>No results found for your search criteria.</p>
    <button class="reset-search-btn">Clear search</button>
</div>

<style>
    .filters {
        margin: 2rem 0;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .search-wrapper {
        position: relative;
        width: 100%;
    }

    .search-input {
        padding-right: 2.5rem; /* Make room for the clear button */
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .tags-filter {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .tag-btn {
        padding: 0.5rem 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: transparent;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .tag-btn.active {
        background: #333;
        color: white;
    }

    :global(.highlight) {
        background-color: #fff3cd;
        padding: 0 2px;
        border-radius: 2px;
        font-weight: bold;
    }

    /* Optional: Animation for highlighting */
    @keyframes highlightFade {
        from {
            background-color: #ffe066;
        }
        to {
            background-color: #fff3cd;
        }
    }

    :global(.highlight) {
        animation: highlightFade 1s ease-out;
    }

    :global(.timeline-item) {
        transition:
            opacity 0.3s ease,
            visibility 0.3s ease;
    }

    :global(.tag) {
        cursor: pointer;
        transition: all 0.3s ease;
    }

    :global(.tag:hover) {
        background: #e5e7eb;
    }

    :global(.highlight-tag) {
        background: #3b82f6 !important;
        color: white !important;
    }

    .tag-btn:hover {
        background: #e5e7eb;
    }

    .tag-btn.active {
        background: #3b82f6;
        color: white;
        border-color: #3b82f6;
    }

    .no-results {
        text-align: center;
        padding: 2rem;
        background: #f9fafb;
        border-radius: 0.5rem;
        margin: 2rem 0;
    }

    .no-results p {
        color: #6b7280;
        margin-bottom: 1rem;
    }

    .reset-search-btn {
        padding: 0.5rem 1rem;
        background: transparent;
        color: #3b82f6;
        border: 1px solid #3b82f6;
        border-radius: 0.5rem;
        cursor: pointer;
        font-size: 0.875rem;
        transition: all 0.3s ease;
    }

    .reset-search-btn:hover {
        background: #3b82f6;
        color: white;
    }

    .clear-search {
        position: absolute;
        right: 0.5rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        padding: 0.25rem 0.5rem;
        cursor: pointer;
        color: #6b7280;
        border-radius: 9999px;
        transition: all 0.2s ease;
    }

    .clear-search:hover {
        background: #f3f4f6;
        color: #374151;
    }
</style>

<script>
    const searchInput = document.getElementById(
        "searchInput",
    ) as HTMLInputElement;
    const tagButtons = document.querySelectorAll(".tag-btn");
    const educationItems = document.querySelectorAll(".timeline-item");
    const noResultsDiv = document.querySelector(".no-results") as HTMLElement;
    const resetSearchButton = document.querySelector(".reset-search-btn");
    const clearSearchBtn = document.getElementById("clearSearch");

    let activeTag = "all";
    let searchTerm = "";

    // Function to normalize text (remove accents and convert to lowercase)
    function normalizeText(text: string): string {
        return text
            .normalize("NFD")
            .replace(/[\u0300-\u036f]/g, "") // Remove accents
            .toLowerCase()
            .trim();
    }

    function highlightText(element: Element, term: string) {
        if (!term.trim()) {
            // Restore original text by removing highlight spans
            element.innerHTML = element.innerHTML.replace(
                /<mark class="highlight">|<\/mark>/g,
                "",
            );
            return;
        }

        const originalText = element.innerHTML.replace(
            /<mark class="highlight">|<\/mark>/g,
            "",
        );

        // Create a regex pattern that matches the normalized version of the search term
        const normalizedTerm = normalizeText(term);

        // Use a regex pattern that matches accented and non-accented characters
        const accentInsensitivePattern = normalizedTerm
            .split("")
            .map((char) => {
                const accentedVariants: Record<string, string> = {
                    a: "[aáà]",
                    e: "[eéè]",
                    i: "[iíì]",
                    o: "[oóò]",
                    u: "[uúù]",
                    n: "[nñ]",
                };
                return accentedVariants[char] || char;
            })
            .join("");

        const regex = new RegExp(`(${accentInsensitivePattern})`, "gi");

        // Replace while preserving the original case and accents
        let lastIndex = 0;
        let result = "";
        let match;

        while ((match = regex.exec(originalText)) !== null) {
            const matchedText = match[0];
            result += originalText.substring(lastIndex, match.index);
            result += `<mark class="highlight">${matchedText}</mark>`;
            lastIndex = regex.lastIndex;
        }
        result += originalText.substring(lastIndex);

        element.innerHTML = result;
    }

    function filterItems() {
        const normalizedSearchTerm = normalizeText(searchTerm);
        let visibleItems = 0;

        educationItems.forEach((item) => {
            const itemElement = item as HTMLElement;
            const itemTags = itemElement.dataset.tags?.split(",") || [];
            const titleElement = itemElement.querySelector("h3");
            const descriptionElement =
                itemElement.querySelector(".description");

            const title = titleElement?.textContent || "";
            const description = descriptionElement?.textContent || "";

            const normalizedTitle = normalizeText(title);
            const normalizedDescription = normalizeText(description);

            const matchesTag =
                activeTag === "all" || itemTags.includes(activeTag);
            const matchesSearch =
                !normalizedSearchTerm ||
                normalizedTitle.includes(normalizedSearchTerm) ||
                normalizedDescription.includes(normalizedSearchTerm);

            const isVisible = matchesTag && matchesSearch;

            // Change display to opacity/visibility
            itemElement.style.opacity = isVisible ? "1" : "0";
            itemElement.style.visibility = isVisible ? "visible" : "hidden";
            itemElement.style.position = isVisible ? "relative" : "absolute";
            itemElement.style.pointerEvents = isVisible ? "auto" : "none";

            if (isVisible) {
                visibleItems++;
                // Highlight matching text if item is visible
                if (searchTerm && titleElement && descriptionElement) {
                    highlightText(titleElement, searchTerm);
                    highlightText(descriptionElement, searchTerm);
                }
            }
        });

        // Show/hide no results message
        noResultsDiv.style.display = visibleItems === 0 ? "block" : "none";
    }

    function highlightMatchingTags(activeTagValue: string) {
        document.querySelectorAll(".tag").forEach((tagElement: Element) => {
            const tag = tagElement as HTMLElement;
            if (activeTagValue === "all") {
                tag.classList.remove("highlight-tag");
            } else {
                const matches = tag.textContent?.trim() === activeTagValue;
                tag.classList.toggle("highlight-tag", matches);
            }
        });
    }

    function setActiveTag(newTag: string) {
        activeTag = newTag;

        // Update filter buttons UI
        tagButtons.forEach((btn) => {
            const button = btn as HTMLElement;
            button.classList.toggle("active", button.dataset.tag === newTag);
        });

        // Highlight matching tags
        highlightMatchingTags(newTag);

        // Filter items
        filterItems();
    }

    function resetSearch() {
        searchInput.value = "";
        searchTerm = "";
        clearSearchBtn!.style.display = "none";
        filterItems();
    }

    // Update existing click handlers
    tagButtons.forEach((button) => {
        button.addEventListener("click", () => {
            const buttonElement = button as HTMLButtonElement;
            setActiveTag(buttonElement.dataset.tag || "all");
        });
    });

    // Add click handler for item tags
    document.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (target.classList.contains("tag")) {
            const tagText = target.textContent?.trim() || "";
            setActiveTag(tagText);
        }
    });

    // Update reset button click handler
    resetSearchButton?.addEventListener("click", resetSearch);

    // Show/hide clear button based on input content
    searchInput?.addEventListener("input", (e) => {
        clearTimeout(debounceTimeout);

        const hasValue = (e.target as HTMLInputElement).value.length > 0;
        clearSearchBtn!.style.display = hasValue ? "block" : "none";

        debounceTimeout = setTimeout(() => {
            searchTerm = (e.target as HTMLInputElement).value;
            filterItems();
        }, 300);
    });

    // Clear search on button click
    clearSearchBtn?.addEventListener("click", resetSearch);

    let debounceTimeout: number;
</script>
