---

---

<style>
  .toc {
    position: fixed;
    top: calc(var(--navbar-height) + 1px);
    right: calc(var(--sidebar-width) * -1);
    width: var(--sidebar-width);
    height: 50dvh;
    background-image: var(--navigation-background-image);
    background-repeat: repeat;
    backdrop-filter: blur(10px);
    z-index: 9;
    transition: right 0.3s ease;
    overflow-y: auto;

    &.active {
      right: 0;
    }

    @media screen and (min-width: 993px) {
      right: -28dvw;
      width: 28dvw;
      height: calc(100vh - 91px);
    }

    .title {
      margin-bottom: 2em;
      color: var(--accent-color);
    }

    .content {
      padding: 1em;
    }

    .headings {
      display: flex;
      flex-direction: column;
      gap: 0.5em;

      a {
        color: var(--foreground-color);
        text-decoration: none;
        padding: 5px 0;
        display: block;
        transition: color 0.2s ease;

        &:hover {
          color: var(--accent-color);
        }

        &.active {
          color: var(--accent-color);
          font-weight: bold;

          &.toc-h2,
          &.toc-h3,
          &.toc-h4 {
            color: var(--accent-color);
            font-weight: normal;
          }
        }

        &.toc-h2 {
          margin-left: 0;
          color: var(--accent-secondary-color);
        }

        &.toc-h3 {
          margin-left: 15px;
          font-size: 0.95em;
          color: var(--accent-muted-color);
        }

        &.toc-h4 {
          margin-left: 45px;
          font-size: 0.9em;
        }
      }
    }
  }
</style>

<aside id="toc" class="toc">
  <div class="content">
    <h3 class="title">Tabla de Contenidos</h3>
    <div id="headings" class="headings">
      <!-- Table of contents will be generated here -->
    </div>
  </div>
</aside>

<script>
  // Function to extract headings from the page
  function generateTableOfContents() {
    const headings = document.querySelectorAll("main h2, main h3, main h4");
    const tocList = document.getElementById("headings");

    if (!tocList || headings.length === 0) return;

    tocList.innerHTML = "";

    headings.forEach((heading) => {
      const level = heading.tagName.toLowerCase();
      const text = heading.textContent;

      // Create an ID for the heading if it doesn't have one
      if (!heading.id) {
        heading.id = text
          ?.toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/(^-|-$)/g, "");
      }

      const link = document.createElement("a");
      link.href = `#${heading.id}`;
      link.textContent = text;
      link.classList.add(`toc-${level}`);

      // Add click event to scroll to the heading
      link.addEventListener("click", (e) => {
        e.preventDefault();

        document.getElementById("toc")?.classList.remove("active");
        document.getElementById("toc-toggle-btn")?.classList.remove("active");

        // Scroll to the heading
        const targetHeading = document.getElementById(heading.id);
        if (targetHeading) {
          targetHeading.scrollIntoView({
            behavior: "smooth",
          });
        }
      });

      tocList.appendChild(link);
    });
  }

  // Function to highlight the active heading in the TOC
  function setupScrollSpy() {
    const headings = document.querySelectorAll("main h2, main h3, main h4");
    const tocLinks = document.querySelectorAll(".headings a");

    if (headings.length === 0 || tocLinks.length === 0) return;

    // Create an IntersectionObserver to detect when headings are in view
    const observer = new IntersectionObserver(
      (entries) => {
        // Get all entries that are currently intersecting
        const visibleEntries = entries.filter((entry) => entry.isIntersecting);

        if (visibleEntries.length > 0) {
          // Get the first visible heading (closest to the top)
          const visibleHeading = visibleEntries[0].target;

          // Remove active class from all TOC links
          tocLinks.forEach((link) => link.classList.remove("active"));

          // Find the corresponding TOC link and add an active class
          const activeLink = document.querySelector(
            `.headings a[href="#${visibleHeading.id}"]`,
          );
          if (activeLink) {
            activeLink.classList.add("active");
          }
        }
      },
      {
        rootMargin: "-48px 0px -80% 0px", // Approximating scroll-margin-top: calc(46px + 0.25em)
        threshold: 0,
      },
    );

    // Observe all headings
    headings.forEach((heading) => {
      observer.observe(heading);
    });
  }

  // Generate TOC when the page loads
  document.addEventListener("astro:page-load", () => {
    generateTableOfContents();
    setupScrollSpy();
  });
</script>
