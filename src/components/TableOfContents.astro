---

---

<div class="toc-toggle">
  <button
    id="toc-toggle-btn"
    aria-label="Toggle Table of Contents"
    title="Tabla de Contenidos"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width="24"
      height="24"
      class="toc-icon"
    >
      <!-- List icon that can transform to X -->
      <rect class="list-line top" x="3" y="4" width="18" height="2" rx="1" fill="currentColor"></rect>
      <rect class="list-line middle-top" x="3" y="9" width="12" height="2" rx="1" fill="currentColor"></rect>
      <rect class="list-line middle-bottom" x="3" y="14" width="18" height="2" rx="1" fill="currentColor"></rect>
      <rect class="list-line bottom" x="3" y="19" width="12" height="2" rx="1" fill="currentColor"></rect>
      <!-- X lines (hidden by default) -->
      <path
        class="x-line top-right"
        d="M18.36 5.64l-12.72 12.72"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        opacity="0"></path>
      <path
        class="x-line top-left"
        d="M5.64 5.64l12.72 12.72"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        opacity="0"></path>
    </svg>
  </button>
</div>

<aside id="toc" class="toc">
  <div class="toc-content">
    <h3 class="toc-title">Tabla de Contenidos</h3>
    <div id="toc-list" class="toc-list">
      <!-- Table of contents will be generated here -->
    </div>
  </div>
</aside>

<style is:inline>
  .toc-toggle {
    position: fixed;
    z-index: 10;
    top: 100px;
    right: 10px;
  }

  #toc-toggle-btn {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: transparent;
    color: var(--foreground-color);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 0 5px rgba(159, 91, 213, 0.5);
    transition:
      transform 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275),
      fill 0.3s ease,
      background-color 0.3s ease,
      box-shadow 0.3s ease;
    will-change: transform;
  }

  .toc-icon {
    transition: transform 0.4s ease;
  }

  .toc-icon rect,
  .toc-icon path {
    transition:
      transform 0.4s cubic-bezier(0.68, -0.6, 0.32, 1.6),
      opacity 0.3s ease-in-out,
      stroke-width 0.3s ease;
    transform-origin: center;
  }

  #toc-toggle-btn:hover {
    background-color: var(--accent-color);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }

  #toc-toggle-btn.active {
    transform: rotate(90deg) scale(0.95);
    background-color: transparent;
    box-shadow: 0 0 8px rgba(159, 91, 213, 0.7);
    color: var(--accent-color-muted);
  }

  /* Hide list lines when active */
  #toc-toggle-btn.active .list-line {
    opacity: 0;
  }

  /* Show and position X lines when active */
  #toc-toggle-btn.active .x-line {
    opacity: 1;
  }

  #toc-toggle-btn.active .x-line.top-right {
    transform: scale(1.2);
    stroke-width: 2;
  }

  #toc-toggle-btn.active .x-line.top-left {
    transform: scale(1.2);
    stroke-width: 2;
  }

  #toc-toggle-btn.active:hover {
    background-color: var(--accent-color-muted);
  }

  #toc-toggle-btn.active:hover .x-line {
    stroke: var(--foreground-color);
    stroke-width: 2.5;
  }

  #toc-toggle-btn:hover .toc-icon rect,
  #toc-toggle-btn:hover .toc-icon path {
    stroke-width: 2.5;
  }

  .toc {
    position: fixed;
    top: 46px;
    right: -256px;
    width: 256px;
    height: calc(100vh - 81px);
    border-left: 1px solid var(--border-color);
    background-image: var(--navigation-background-image);
    background-repeat: repeat;
    backdrop-filter: blur(10px);
    z-index: 9;
    transition: right 0.3s ease;
    overflow-y: auto;

    @media screen and (min-width: 880px) {
      right: -35dvw;
      width: 35dvw;
      height: calc(100vh - 91px);
    }
  }

  .toc.active {
    right: 0;
  }

  .toc-title {
    color: var(--foreground-color);
  }

  .toc-content {
    padding: 20px;
  }

  main h2,
  main h3,
  main h4 {
    scroll-margin-top: calc(46px + 1em);
  }

  .toc-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .toc-list a {
    color: var(--foreground-color);
    text-decoration: none;
    padding: 5px 0;
    display: block;
    transition: color 0.2s ease;
  }

  .toc-list a:hover {
    color: var(--accent-color);
  }

  .toc-list a.active {
    color: var(--accent-color);
    font-weight: bold;
  }

  a.toc-h2 {
    margin-left: 15px;
  }

  .toc-list .toc-h2 {
    margin-left: 0;
  }

  .toc-list .toc-h3 {
    margin-left: 15px;
    font-size: 0.95em;
    color: var(--accent-color-muted);
  }

  .toc-list .toc-h4 {
    margin-left: 45px;
    font-size: 0.9em;
  }
</style>

<script>
  // Function to extract headings from the page
  function generateTableOfContents() {
    const headings = document.querySelectorAll("main h2, main h3, main h4");
    const tocList = document.getElementById("toc-list");

    if (!tocList || headings.length === 0) return;

    tocList.innerHTML = "";

    headings.forEach((heading) => {
      const level = heading.tagName.toLowerCase();
      const text = heading.textContent;

      // Create an ID for the heading if it doesn't have one
      if (!heading.id) {
        heading.id = text
          ?.toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/(^-|-$)/g, "");
      }

      const link = document.createElement("a");
      link.href = `#${heading.id}`;
      link.textContent = text;
      link.classList.add(`toc-${level}`);

      // Add click event to scroll to the heading
      link.addEventListener("click", (e) => {
        e.preventDefault();

        document.getElementById("toc")?.classList.remove("active");
        document.getElementById("toc-toggle-btn")?.classList.remove("active");

        // Scroll to the heading
        const targetHeading = document.getElementById(heading.id);
        if (targetHeading) {
          targetHeading.scrollIntoView({
            behavior: "smooth",
          });
        }
      });

      tocList.appendChild(link);
    });
  }

  // Toggle TOC visibility
  const tocToggleBtn = document.getElementById("toc-toggle-btn");
  const toc = document.getElementById("toc");

  tocToggleBtn?.addEventListener("click", () => {
    toc?.classList.toggle("active");
    tocToggleBtn.classList.toggle("active");
  });

  // Close the TOC when clicking outside
  document.addEventListener("click", (event) => {
    const target = event.target as HTMLElement;
    if (
      toc?.classList.contains("active") &&
      !toc.contains(target) &&
      !tocToggleBtn?.contains(target)
    ) {
      toc.classList.remove("active");
      tocToggleBtn?.classList.remove("active");
    }
  });

  // Generate TOC when the page loads
  document.addEventListener("DOMContentLoaded", () => {
    generateTableOfContents();
    setupScrollSpy();
  });

  // Function to highlight the active heading in the TOC
  function setupScrollSpy() {
    const headings = document.querySelectorAll("main h2, main h3, main h4");
    const tocLinks = document.querySelectorAll(".toc-list a");

    if (headings.length === 0 || tocLinks.length === 0) return;

    // Create an IntersectionObserver to detect when headings are in view
    const observer = new IntersectionObserver(
      (entries) => {
        // Get all entries that are currently intersecting
        const visibleEntries = entries.filter(entry => entry.isIntersecting);

        if (visibleEntries.length > 0) {
          // Get the first visible heading (closest to the top)
          const visibleHeading = visibleEntries[0].target;

          // Remove active class from all TOC links
          tocLinks.forEach(link => link.classList.remove("active"));

          // Find the corresponding TOC link and add an active class
          const activeLink = document.querySelector(`.toc-list a[href="#${visibleHeading.id}"]`);
          if (activeLink) {
            activeLink.classList.add("active");
          }
        }
      },
      {
        rootMargin: "-48px 0px -80% 0px", // Approximating scroll-margin-top: calc(46px + 0.25em)
        threshold: 0
      }
    );

    // Observe all headings
    headings.forEach(heading => {
      observer.observe(heading);
    });
  }
</script>
